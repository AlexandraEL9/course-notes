# JavaScript Debugging and Testing

## Contents

- [Exceptions and Debugging](#exceptions-and-debugging)
  - [Exceptions](#exceptions)
    - [What is an Exception?](#what-is-an-exception)
    - [Common JS Error Types](#common-js-error-types)
  - [try...catch](#trycatch)
  - [Custom Exceptions](#custom-exceptions)
    - [Example: safeDivide()](#example-safedividenum-denom)
- [Debugging](#debugging)
  - [What is Debugging?](#what-is-debugging)
  - [Techniques](#techniques)
    - [Logging](#logging)
    - [The debugger Keyword](#the-debugger-keyword)
    - [Breakpoints](#breakpoints)
    - [Chrome DevTools Summary](#chrome-devtools-summary)
- [JEST Testing](#jest-testing)
  - [Introduction to Testing](#introduction-to-testing)
    - [Benefits](#benefits)
  - [Types of Testing](#types-of-testing)
    - [Unit Testing](#unit-testing)
    - [Integration Testing](#integration-testing)
    - [End-to-End Testing](#end-to-end-testing)
- [Using Jest](#using-jest)
  - [Key Features](#key-features)
  - [Installation and Setup](#install)
  - [Writing Tests in Jest](#writing-tests-in-jest)
    - [Basic Syntax](#basic-syntax)
    - [Test Anatomy](#anatomy-of-the-test)
    - [Common Matchers](#common-matchers)
      - [toBe()](#example-tobe)
      - [toBeTruthy() / toBeFalsy()](#example-tobetruthy--tobefalsy)
      - [toContain()](#example-tocontain)
      - [toHaveLength()](#example-tohavelength)
      - [toBeGreaterThan()](#example-tobegreaterthan)
  - [Test-Driven Development (TDD)](#test-driven-development-tdd)
- [Asynchronous Testing](#asynchronous-testing)
  - [Using Promises](#with-promises)
  - [Using Async/Await](#with-asyncawait)
- [Mocking in Jest](#mocking-in-jest)
  - [`jest.fn()`](#jestfn)
  - [`jest.mock()`](#jestmock)
- [Snapshot Testing](#snapshot-testing)
- [Code Coverage](#code-coverage)
  - [Running with Coverage](#run-with-coverage)
  - [Types of Coverage](#types-of-coverage)
- [Best Practices](#best-practices)
- [Other Testing Frameworks](#other-testing-frameworks)

---

## Exceptions and Debugging

### Exceptions

**What is an Exception?**
- an unexpected event (like an error) that interrupts the normal flow of a program
- in JS we 'handle' them to prevent app crashes and allow *graceful failure*

**Common JS Error types**
| Error Type       | Description                                                    |
| ---------------- | -------------------------------------------------------------- |
| `SyntaxError`    | Bad syntax, like missing a bracket                             |
| `ReferenceError` | Using a variable that doesn't exist                            |
| `TypeError`      | Using the wrong data type (e.g., calling a method on a number) |
| `RangeError`     | Value out of range (e.g., invalid array length)                |


### try...catch

```js
try {
  // code to run
} catch (error) {
  console.error("Something went wrong:", error);
}
```

✅ Use sparingly – don’t overuse try...catch
✅ Be specific with error types
✅ Always log errors for debugging
✅ Consider fallback actions or recovery if possible

### Custom Exceptions

- you can create and throw your own errors

```js
throw new ERROR("This is a custom error message");
```

**Application**
Write a safeDivide(num, denom) function:

  - Use try...catch
  - Throw error if denom is 0
  - Return result if valid
  - Log error if caught

```js
// create the function
function safeDivide(numerator, denominator) {
  try {
    // check if denominator is 0
    if (denominator === 0) {
      // if it is 0, throw the custom error- the one we anticipate
      throw new Error("Cannot divide by zero");
    }
    // if valid, return the result of the division
    return numerator / denominator;

  } catch (error) {
    // this is called IF error is thrown
    // log error message to console
    console.log("Error:", error.message);
  }

}
// test calls to see behaviour
//console.log(safeDivide(10, 2));
//console.log(safeDivide(10, 0));
```

## Debugging
**What is Debugging?**

- The process of finding and fixing bugs in your code.

- Makes code more reliable and easier to maintain.

### Techniques

#### Logging
```js
console.log("Variable value:", myVar);
console.error("Something broke:", err);
```

#### The debugger Keyword
- acts like a breakpoint embedded in code
- pauses ...
```js
function checkSomething(x) {
  debugger;  // pauses execution here
  return x + 1;
}
```

#### Breakpoints
- In Chrome DevTools
  - You can pause execution at a line in the browser.
  - Inspect variables, step through code line-by-line.

#### Chrome DevTools Summary

| Tool        | What it Does                       |
| ----------- | ---------------------------------- |
| Console     | View logs & interact with JS       |
| Sources     | Step through code, set breakpoints |
| Elements    | Inspect/edit HTML + CSS            |
| Network     | Monitor requests/responses         |
| Performance | Profile code speed & efficiency    |

---

## JEST Testing

### Introduction to Testing

Testing in software development evaluates an application to ensure it meets requirements, works as expected, and is free from defects.

### Benefits:
- **Validation and Verification** 
  - *Validation:* the software does what its supposed to
  - *Verification:* the software is built to specification and designs (requirements, design, user expectations)
- **Quality Assurance**
  - improve quality of software - detecting defects early - reliable, stable, performs as expected under various conditions
- **Risk Reduction**
  - identify and fix defects before release of software to users- reduces risk of failures/ errors - builds confidence of stakeholders

---

### Types of Testing

#### Unit Testing
Tests individual components or functions in isolation.

#### Integration Testing
Tests the interaction between units/modules.

#### End-to-End Testing
Tests the complete flow of an application from the user’s perspective.

---

## Using Jest

**Jest** is a JavaScript testing framework by Facebook.

### Key Features:
- Test isolation
  - runs tests in parallel - ensuring test environments are isolated to avoid side effects
- Snapshot testing
  - create snapshots of application output and automatically compare during tests
- Mocking and spies
  - mocking functions, modules, timers- simulate complex dependencies during tests

### Install:
```bash
npm install --save-dev jest
```

### Add script to `package.json`:
```json
"scripts": {
  "test": "jest"
}
```

---

### Writing Tests in Jest

- create a directory called **tests** and put a test file (e.g. sum.test.js)

```js
// sum.js
// function 1
function sum(a, b) {
    return a + b;
}

// multiply function
function multiply(a, b) {
    return a * b;
}

// subtract function
function subtract(a, b) {
    return a - b;
}

function divide(a, b) {
    return a / b;
}

module.exports = { sum, multiply, subtract, divide };
// exports the four functions (sum, multiply, subtract, and divide) so they can be used in other files
```

```js
//sum.test.js
 
// import the sum, multiply, subtract, and divide functions from another file so they can be used in your test file.
const { sum, multiply, subtract, divide } = require('../src/sum');

// addition
test("adds 1 + 2 to equal 3", () => {
  expect(sum(1, 2)).toBe(3);
});
```

#### Basic Syntax:
```js
test("adds 1 + 2 to equal 3", () => {
  expect(sum(1, 2)).toBe(3);
});
```
#### Anatomy of the Test
| Part                      | Explanation       | Layman's phrasing (narrative)         |
| ------------------------- | ---------------- | --------------------------------- |
| `test(...)`               | A **Jest function** that defines a single test. It takes two arguments: the test name and the logic. | *This is a Jest test to check something specific.*     |
| `"adds 1 + 2 to equal 3"` | A **description** of what you're testing — shown in the test results.                                | *If we add 1 and 2, does it equal 3?*                  |
| `() => { ... }`           | A **callback function** that runs the test — contains your test code.                                | *Let's run the test and see if the result is correct.* |
| `expect(...)`             | An **assertion** — tells Jest what you expect the outcome to be.                                     | *I expect this to happen...*                           |
| `sum(1, 2)`               | The **function being tested** — you're passing in test values.                                       | *...the sum of 1 and 2...*                             |
| `.toBe(3)`                | A **matcher** — checks if the result is exactly 3 (`===`).                                           | *...should be exactly 3 (in both value and type).*     |



#### Common Matchers:
- `toBe()`
- `toBeTruthy()` / `toBeFalsy()`
- `toContain()`
- `toHaveLength()`
- `toBeGreaterThan()`

#### Example: tobe()
```js
function multiply(a, b) {
  return a * b;
}

// Test
test("multiplies 2 and 3 to equal 6", () => {
  expect(multiply(2, 3)).toBe(6);
});
```
| Part               | Explanation                                     | Layman's phrasing                 |
| ------------------ | ----------------------------------------------- | --------------------------------- |
| `test(...)`        | Defines the test.                               | *Let's test something.*           |
| `"5 is exactly 5"` | Describes the test being run.                   | *We're checking that 5 equals 5.* |
| `() => { ... }`    | The test code block.                            | *Run the test logic.*             |
| `expect(5)`        | The actual value you're testing.                | *I expect 5...*                   |
| `.toBe(5)`         | Checks that the value is exactly 5 using `===`. | *...to be exactly 5.*             |


#### Example: toBeTruthy() / toBeFalsy()
`toBeTruthy()` and `toBeFalsy()` can be confusing at first because they don’t mean strictly true or false, but rather if a value acts truthy or falsy in JavaScript logic.

In JavaScript, some values automatically behave like true (truthy) or false (falsy) when used in conditions:

**Truthy examples:**
- true

- "hello" (non-empty strings)

- 1, -10, 3.14 (non-zero numbers)

- {} (objects), [] (arrays)

**Falsy examples:**
- false

- 0

- "" (empty string)

- null

- undefined

- NaN

```js
test("true is truthy", () => {
  expect(true).toBeTruthy();
});

test("0 is falsy", () => {
  expect(0).toBeFalsy();
});
```
| Part            | Explanation                                                | Layman's phrasing             |
| --------------- | ---------------------------------------------------------- | ----------------------------- |
| `expect(true)`  | Testing a truthy value.                                    | *I expect true...*            |
| `.toBeTruthy()` | Asserts that the value is truthy (not false, 0, '', etc.). | *...to count as 'true-ish'.*  |
| `expect(0)`     | Testing a falsy value.                                     | *I expect zero...*            |
| `.toBeFalsy()`  | Asserts that the value is falsy.                           | *...to count as 'false-ish'.* |

**Example: Check a user typed something**

So let's say you're testing a form input:
```js
function hasInput(value) {
  return !!value; // returns true if there's something, false if empty
}
```
You want to check if the function correctly returns true (truthy) when the user types something, and false (falsy) when they don't.
```js
test("has input returns truthy for non-empty string", () => {
  expect(hasInput("hello")).toBeTruthy();
});

test("has input returns falsy for empty string", () => {
  expect(hasInput("")).toBeFalsy();
});
```

#### Example: toContain()
```js
test("array contains 2", () => {
  expect([1, 2, 3]).toContain(2);
});
```
| Part                | Explanation                                 | Layman's phrasing                  |
| ------------------- | ------------------------------------------- | ---------------------------------- |
| `expect([1, 2, 3])` | Testing an array.                           | *I expect this list \[1, 2, 3]...* |
| `.toContain(2)`     | Checks if the array contains the value `2`. | *...to contain the number 2.*      |

#### Example: toHaveLength()
```js
test("string has length 5", () => {
  expect("Hello").toHaveLength(5);
});
```
| Part               | Explanation                              | Layman's phrasing              |
| ------------------ | ---------------------------------------- | ------------------------------ |
| `expect("Hello")`  | Testing a string.                        | *I expect the word "Hello"...* |
| `.toHaveLength(5)` | Checks that it has exactly 5 characters. | *...to have 5 letters.*        |

#### Example: toBeGreaterThan()
```js
test("10 is greater than 5", () => {
  expect(10).toBeGreaterThan(5);
});
```
| Part                  | Explanation                    | Layman's phrasing         |
| --------------------- | ------------------------------ | ------------------------- |
| `expect(10)`          | The number being tested.       | *I expect 10...*          |
| `.toBeGreaterThan(5)` | Checks if it's greater than 5. | *...to be bigger than 5.* |

---

### Test-Driven Development (TDD)

TDD is writing tests before writing the code.

#### Red-Green-Refactor Cycle:
1. **Red:** Write a failing test.
2. **Green:** Write code to make it pass.
3. **Refactor:** Clean up code while keeping test green.

---

## Asynchronous Testing

- Used for testing Promises, async/await, and callbacks.
- involves checking the behavior of code that doesn't execute
immediately
- is common in JavaScript, especially when working with external resources
like APIs, databases, or file systems.

**Asynchronous Testing:** Jest ensures that tests wait for asynchronous operations to
complete before making assertions, allowing for accurate validation of code that relies on
delayed or background processes.
**Testing Strategies:** To test asynchronous code in Jest, developers use techniques like
waiting for Promises to resolve, employing async/await to pause execution until the
asynchronous operation completes, and using Jest's mocking capabilities to simulate
asynchronous behavior, thereby allowing tests to be isolated from external dependencies.

### With Promises:
```js
return fetchData().then(data => {
  expect(data).toBe("Hello");
});
```

### With Async/Await:
```js
test("async test", async () => {
  const data = await fetchData();
  expect(data).toBe("Hello");
});
```

---

## Mocking in Jest

### `jest.fn()`
Creates a mock function.
```js
const mockFn = jest.fn();
mockFn("arg");
expect(mockFn).toHaveBeenCalled();
```

### `jest.mock()`
Mocks an entire module.
```js
jest.mock('./api');
api.fetchData.mockResolvedValue("Mock Data");
```

---

## Snapshot Testing

Captures output and compares it with a saved version.

```js
test("renders correctly", () => {
  const tree = renderer.create(<MyComponent />).toJSON();
  expect(tree).toMatchSnapshot();
});
```

---

## Code Coverage

Measure how much of your code is tested.

### Run with coverage:
```bash
npx jest --coverage
```

### Types of Coverage:
- Statement
- Branch
- Function
- Line

---

## Best Practices

- Keep tests small and focused
- Use descriptive names
- DRY: eliminate redundant setup

---

## Other Testing Frameworks

- **Mocha** – flexible and customizable
- **Jasmine** – BDD style
- **AVA** – fast and minimalist
- **QUnit** – used with jQuery
- **Tape** – simple and TAP-compliant

---